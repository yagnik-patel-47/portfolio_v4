---
import { Icon } from 'astro-icon/components'

const links = [
  {
    name: 'Projects',
    path: '/projects',
  },
  {
    name: 'About Me',
    path: '/about',
  },
  {
    name: 'UI Bits',
    path: '/uibits',
  },
]

const socials = [
  {
    label: 'Twitter',
    href: 'https://x.com/yagnik_pt',
    icon: 'x',
  },
  {
    label: 'Github',
    href: 'https://github.com/yagnik-patel-47',
    icon: 'github',
  },
  {
    label: 'Hashnode',
    href: 'https://mytakeonweb.hashnode.dev',
    icon: 'hashnode',
  },
  {
    label: 'Linkedin',
    href: 'https://linkedin.com/in/yagnikpt',
    icon: 'linkedin',
  },
  {
    label: 'Instagram',
    href: 'https://instagram.com/yagnik._._.patel',
    icon: 'instagram',
  },
]
---

<div
  transition:persist
  id="floatingBarContainer"
  class="group fixed !inset-x-4 max-md:inset-x-auto md:max-w-2xl md:w-full md:!left-1/2 md:!-translate-x-1/2 bottom-4 overflow-hidden z-20 bg-zinc-950 text-neutral-200"
  style={{
    clipPath: 'inset(0 round 40px)',
    touchAction: 'none',
  }}
  data-state="closed"
>
  <div id="nav-content" class="overflow-hidden h-0 text-neutral-200">
    <nav class="grid grid-cols-1 py-4">
      {
        links.map((work, index) => (
          <a
            href={work.path}
            class="text-3xl lg:text-4xl block font-semibold px-8 py-4 hover:text-white md:pl-12 hover:bg-neutral-800 transition nav-links"
          >
            {work.name}{' '}
            <span class="text-sm md:text-base lg:text-lg font-medium text-neutral-400">
              (0{index + 1})
            </span>
          </a>
        ))
      }
    </nav>
    <div
      class="py-2 pb-4 md:py-4 md:pb-6 space-y-4 px-8 md:px-12 border-t-2 border-b-2 border-zinc-800"
    >
      <h3 class="text-lg xl:text-2xl text-neutral-400 font-semibold">
        Socials.
      </h3>
      <div class="flex gap-x-6 gap-y-8 responsive-cols">
        {
          socials.map((social) => (
            <a
              target="_blank"
              class="flex items-center gap-1 group/link"
              href={social.href}
            >
              <Icon
                title={`${social.label} Handle`}
                class="size-5"
                name={`social/${social.icon}`}
              />
            </a>
          ))
        }
      </div>
      <a
        href="mailto:yagnik47.dev@gmail.com"
        class="block bg-neutral-100 text-neutral-900 text-center font-medium px-4 py-3 text-sm rounded-full md:hidden"
        >Contact me</a
      >
    </div>
  </div>
  <div
    class="flex justify-between items-center px-8 md:px-12 py-2 motion-reduce:transition-none gap-8"
  >
    <a class="text-xl flex items-center space-x-2 py-2 xl:hidden" href="/">
      <Icon class="size-6" name="terminal" />
      <span>/yagnik</span>
    </a>
    <a
      id="home-link"
      class="text-xl flex items-center space-x-2 flex-1 py-2 max-xl:hidden"
      href="/"
    >
      <Icon class="size-6" name="terminal" />
      <span
        class="inline-block overflow-hidden opacity-0 whitespace-nowrap"
        id="cd-span">cd</span
      >
      <span>~</span>
      <span class="inline-block whitespace-nowrap overflow-hidden" id="route"
      ></span>
    </a>
    <div class="flex space-x-8 items-center">
      <a
        href="mailto:yagnik47.dev@gmail.com"
        class="block bg-neutral-800 text-neutral-100 text-sm px-4 py-2 rounded-full max-md:hidden"
        >Contact me</a
      >
      <button id="ham-btn" class="size-6 text-neutral-100" aria-label="Menu">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M3.75 9h16.5m-16.5 6.75h16.5"></path>
        </svg>
      </button>
    </div>
  </div>
</div>

<script>
  import { animate, timeline } from 'motion'
  const navCollapseSection = document.getElementById('nav-content')!
  let navContentHeight = navCollapseSection?.scrollHeight ?? 0
  const hamBtn = document.getElementById('ham-btn')!
  const floatingBarContainer = document.getElementById('floatingBarContainer')!
  const navLinks = document.querySelectorAll(
    '.nav-links',
  ) as NodeListOf<HTMLAnchorElement>
  const routeSpan = document.getElementById('route')!
  const cdSpan = document.getElementById('cd-span')!
  const homeLink = document.getElementById('home-link')!
  let currentRoute = window.location.pathname

  let cdSpanWidth = cdSpan?.getBoundingClientRect().width ?? 0
  cdSpan.style.width = '0'

  if (window.location.pathname !== '/')
    routeSpan.textContent = window.location.pathname

  document.addEventListener('astro:after-swap', () => {
    if (window.location.pathname !== '/')
      routeSpan.textContent = window.location.pathname
    else routeSpan.textContent = ''
    currentRoute = window.location.pathname
  })

  homeLink.addEventListener('mouseenter', () => {
    if (currentRoute === '/') return
    animate(
      cdSpan,
      { width: cdSpanWidth + 'px', opacity: 1 },
      { duration: 0.15 },
    )
    animate(routeSpan, { opacity: 0 }, { duration: 0.15 })
  })

  homeLink.addEventListener('mouseleave', () => {
    animate(cdSpan, { width: 0, opacity: 0 }, { duration: 0.15 })
    animate(routeSpan, { opacity: 1 }, { duration: 0.15 })
  })

  const prefersReducedMotion = window.matchMedia(
    '(prefers-reduced-motion: reduce)',
  ).matches

  window.addEventListener('resize', () => {
    navContentHeight = navCollapseSection?.scrollHeight ?? 0
  })

  window.addEventListener('keydown', (e) => {
    if (
      floatingBarContainer.dataset.state === 'open' &&
      e.code.startsWith('Digit')
    )
      navLinks[parseInt(e.key) - 1]?.click()
    if (floatingBarContainer.dataset.state === 'open' && e.key === 'Escape')
      setCloseState(prefersReducedMotion)
  })

  hamBtn.addEventListener('click', () => {
    if (floatingBarContainer.dataset.state === 'open')
      setCloseState(prefersReducedMotion)
    else setOpenState(prefersReducedMotion)
  })

  document.addEventListener('click', (event) => {
    // @ts-ignore
    const isClickInside = floatingBarContainer.contains(event.target)
    if (!isClickInside && floatingBarContainer.dataset.state === 'open')
      setCloseState(prefersReducedMotion)
  })

  navLinks.forEach((link) => {
    link.addEventListener('click', () => {
      document.addEventListener('astro:after-swap', () => {
        setCloseState(prefersReducedMotion, false)
      })
    })
  })

  let touchData = {
    initialX: null,
    initialY: null,
    y: null,
    x: null,
  }

  floatingBarContainer.addEventListener('touchstart', (e) => {
    touchData = {
      initialX: e.touches[0].clientX,
      initialY: e.touches[0].clientY,
      y: null,
      x: null,
    }
  })
  floatingBarContainer.addEventListener('touchmove', (e) => {
    e.preventDefault()
    touchData = {
      ...touchData,
      y: e.touches[0].clientY,
      x: e.touches[0].clientX,
    }
  })
  floatingBarContainer.addEventListener('touchend', (e) => {
    touchData = {
      ...touchData,
      y: e.changedTouches[0].clientY,
    }
    if (floatingBarContainer.dataset.state === 'open') {
      isDiffGt(touchData.y, touchData.initialY, 100, 'positive')
        ? setCloseState(prefersReducedMotion)
        : setOpenState(prefersReducedMotion)
    } else {
      isDiffGt(touchData.y, touchData.initialY, -50, 'negetive')
        ? setOpenState(prefersReducedMotion)
        : setCloseState(prefersReducedMotion)
    }
  })

  function isDiffGt(
    num1: number,
    num2: number,
    threshold: number,
    sign?: 'positive' | 'negetive',
  ) {
    if (sign === 'positive') {
      return num1 - num2 >= threshold
    }

    if (sign === 'negetive') {
      return num1 - num2 <= threshold
    }

    const difference = Math.abs(num1 - num2)
    return difference >= threshold
  }

  function setOpenState(reducedMotion: boolean) {
    if (
      floatingBarContainer.clientHeight + navContentHeight <
      window.innerHeight
    )
      document.body.style.overflow = 'hidden'
    else floatingBarContainer.style.overflow = 'auto'
    floatingBarContainer.setAttribute('data-state', 'open')
    timeline([
      [
        floatingBarContainer,
        { clipPath: 'inset(0 round 24px)' },
        { duration: reducedMotion ? 0 : 0.2 },
      ],
      [
        navCollapseSection,
        {
          height: `${navContentHeight}px`,
        },
        { duration: reducedMotion ? 0 : 0.2, at: 0.05 },
      ],
    ])
  }
  async function setCloseState(reducedMotion: boolean, animation = true) {
    floatingBarContainer.setAttribute('data-state', 'closed')
    const navClosed = timeline([
      [
        floatingBarContainer,
        { clipPath: 'inset(0 round 40px)' },
        { duration: reducedMotion ? 0 : 0.2 },
      ],
      [
        navCollapseSection,
        {
          height: 0,
        },
        {
          duration: reducedMotion || !animation ? 0 : 0.2,
          at: 0,
          easing: [0.76, 0, 0.24, 1],
        },
      ],
    ])

    await navClosed.finished
    document.body.style.overflow = 'visible'
  }
</script>
