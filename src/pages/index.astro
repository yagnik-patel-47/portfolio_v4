---
import Nav from '@/components/Nav.astro'
import RootLayout from '@/layouts/Root.astro'
import { projects } from '@/lib/projects-data'
import { Image } from 'astro:assets'

const images = projects.map((project) => {
  return {
    data: project.image,
    title: project.name,
  }
})
---

<RootLayout title="/yagnik">
  <Nav />
  <main class="h-dvh py-28 md:py-40 container mx-auto px-4 lg:px-20">
    <!-- <TextEffect
      className="text-3xl md:text-4xl font-bold text-zinc-400 font-header"
      per="word"
      as="h3"
      preset="slide"
      client:load>Yagnik Patel</TextEffect
    > -->
    <h3 class="text-3xl md:text-4xl font-bold text-zinc-400 font-header">
      Yagnik Patel
    </h3>

    <p
      class="mt-6 text-xl md:text-3xl font-bold text-zinc-800 max-w-3xl text-balance overflow-hidden"
      id="para"
    >
      Hey there! I’m a second-year computer science student @KPGU with a passion
      for building awesome, engaging web experiences. My days are filled with
      coding, exploring new ideas, and a bit of a caffeine-fueled grind. Let’s
      make something amazing together!
    </p>
    <div
      class="mt-10 w-full overflow-hidden"
      style={{
        maskImage:
          'linear-gradient(to right,transparent,#000 2.5% 97.5%,transparent)',
      }}
      id="slider"
    >
      <div class="flex">
        {
          images.map((image) => (
            <Image
              class="w-80 slide relative"
              src={image.data}
              alt={image.title}
            />
          ))
        }
      </div>
    </div>
  </main>
</RootLayout>

<script>
  import { animate } from 'motion'

  const slider = document.querySelector('#slider') as HTMLDivElement
  const slides = document.querySelectorAll(
    '.slide',
  ) as NodeListOf<HTMLImageElement>

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry, i) => {
        console.log(entry.target.alt, entry.boundingClientRect)

        if (entry.intersectionRatio > 0 && entry.isIntersecting) {
        }
      })
    },
    { threshold: 0.9 },
  )

  animate(
    slides,
    { x: -slider.offsetWidth },
    { duration: 10, easing: 'linear' },
  )

  for (const slide of slides) {
    observer.observe(slide)
  }
</script>
